//-----------------------------------------------------------------------------------
// File : asdxNode.h
// Desc : Node Module.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------------

#ifndef __ASDX_NODE_H__
#define __ASDX_NODE_H__

//-----------------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------------
#include <asdxTypedef.h>
#include <asdxMath.h>
#include <vector>
#include <d3d11.h>


namespace asdx {

////////////////////////////////////////////////////////////////////////////////////
// NodeUpdateParam structure
////////////////////////////////////////////////////////////////////////////////////
struct NodeUpdateParam
{
    ID3D11DeviceContext*    pDeviceContext; //!< デバイスコンテキストです.
    f64                     Time;           //!< アプリケーション開始からの相対時間です.
    f64                     ElapsedTime;    //!< 前のフレームからの経過時間です.
    f32                     FPS;            //!< １秒当たりフレーム更新回数です.
    bool                    IsStopDraw;     //!< 描画停止フラグです.

    //----------------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //----------------------------------------------------------------------------------------
    NodeUpdateParam()
    : pDeviceContext( nullptr )
    , Time          ( 0 )
    , ElapsedTime   ( 0 )
    , FPS           ( 0.0f )
    , IsStopDraw    ( false )
    {
        /* DO_NOTHING */
    }
};

/////////////////////////////////////////////////////////////////////////////////////
// Node class
/////////////////////////////////////////////////////////////////////////////////////
class Node
{
    //===============================================================================
    // list of friend classes and methods.
    //===============================================================================
    /* NOTHING */

public:
    //===============================================================================
    // public variables.
    //===============================================================================
    /* NOTHING */

    //===============================================================================
    // public methods.
    //===============================================================================
    Node( const u32 nodeID, Node* pParent );
    virtual ~Node();

    //-------------------------------------------------------------------------------
    //! @brief      更新処理を行います.
    //!
    //! @param [in]     param       パラメータ.
    //! @param [in]     pUser       ユーザーデータ.
    //-------------------------------------------------------------------------------
    void Update( NodeUpdateParam& param, void* pUser );

    //-------------------------------------------------------------------------------
    //! @brief      解放処理を行います.
    //-------------------------------------------------------------------------------
    void Release();

    //-------------------------------------------------------------------------------
    //! @brief      子供ノードを持つかどうかチェックします.
    //!
    //! @return     子供ノードを保持している場合はtrueを返却します.
    //-------------------------------------------------------------------------------
    bool HasChild() const;

    //-------------------------------------------------------------------------------
    //! @brief      親ノードを持つかどうかチェックします
    //!
    //! @return     親ノードを持つ場合はtrueを返却します.
    //-------------------------------------------------------------------------------
    bool HasParent() const;

    //-------------------------------------------------------------------------------
    //! @brief      親ノードへのポインタを取得します.
    //!
    //! @return     親ノードへのポインタを返却します.
    //-------------------------------------------------------------------------------
    Node* GetParent() const;

    //-------------------------------------------------------------------------------
    //! @brief      指定されたインデックスの子供ノードを取得します.
    //!
    //! @return     指定されたインデックスの子供ノードを返却します. 子供がいない場合はnullptrが返却されます.
    //-------------------------------------------------------------------------------
    Node* GetChild( u32 index ) const;

    //-------------------------------------------------------------------------------
    //! @brief      ノード識別番号を取得します.
    //!
    //! @return     ノード識別番号を返却します.
    //-------------------------------------------------------------------------------
    const u32 GetID () const;

    //-------------------------------------------------------------------------------
    //! @brief      子供ノードの数を取得します.
    //!
    //! @param [in]     isRecursive     再帰処理を行う場合はtrueを指定.
    //! @return     子供ノードの数を返却します.
    //-------------------------------------------------------------------------------
    u32 GetChildCount( bool isRecusrvie = false ) const;

    //-------------------------------------------------------------------------------
    //! @brief      親ノードを設定します.
    //!
    //! @param [in]     pNode       設定する親ノード.
    //-------------------------------------------------------------------------------
    void SetParent( Node* pNode );

    //-------------------------------------------------------------------------------
    //! @brief      子供ノードを追加します.
    //!
    //! @param [in]     pNode       追加する子供ノード.
    //! @return     追加に成功したらtrueが返却されます.
    //-------------------------------------------------------------------------------
    bool AddChild( Node* pNode );

    //-------------------------------------------------------------------------------
    //! @brief      子供ノードを削除します.
    //!
    //! @param [in]     pNode           削除するノード.
    //! @param [in]     isRecursive     再帰処理を行う場合はtrueを指定.
    //! @return     削除に成功したらtrueが返却されます.
    //-------------------------------------------------------------------------------
    bool DelChild( Node* pNode, bool isRecursive = false );

    //-------------------------------------------------------------------------------
    //! @brief      指定されたノードIDに一致する子供ノードを検索します.
    //!
    //! @param [in]     nodeID          検索するID.
    //! @param [in]     isRecursive     再帰処理を行う場合はtrueを指定.
    //! @return     指定されたノードIDに一致するノードへのポインタが返却されます.
    //              検索にヒットしなかった場合はnullptrが返却されます.
    //-------------------------------------------------------------------------------
    Node* FindChild( const u32 nodeID, bool isRecursive = false );

    //-------------------------------------------------------------------------------
    //! @brief      指定されたノードIDに一致する親ノードを検索します.
    //!
    //! @param [in]     nodeID          検索するID.
    //! @return     指定されたノードIDに一致するノードへのポインタが返却されます.
    //!             検索にヒットしなかった場合はnullptrが返却されます.
    //-------------------------------------------------------------------------------
    Node* FindParent( const u32 nodeID );

protected:
    //===============================================================================
    // protected variables
    //===============================================================================
    Node*                   m_pParent;      //!< 親ノードへのポインタです.
    std::vector<Node*>      m_Children;     //!< 子供ノードへのポインタです.

    //===============================================================================
    // protected methods
    //===============================================================================

    //-------------------------------------------------------------------------------
    //! @brief      更新時の処理です.
    //!
    //! @param [in]     param       パラメータ.
    //! @param [in]     pUser       ユーザーデータ.
    //-------------------------------------------------------------------------------
    virtual void OnUpdate( NodeUpdateParam& param, void* pUser );

    //-------------------------------------------------------------------------------
    //! @brief      解放時の処理です.
    //-------------------------------------------------------------------------------
    virtual void OnRelease( void );

private:
    //===============================================================================
    // private variables.
    //===============================================================================
    const u32               m_NodeID;       //!< ノード識別番号です.

    //===============================================================================
    // private methods.
    //===============================================================================
    Node            ( const Node& );        // アクセス禁止.
    void operator = ( const Node& );        // アクセス禁止.
};


} // namespace asdx


#endif//__ASDX_NODE_H__
